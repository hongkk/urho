<?xml version="1.0" encoding="UTF-8"?>
<XPD:PROJECT xmlns:XPD="http://www.staruml.com" version="1">
<XPD:HEADER>
<XPD:SUBUNITS>
</XPD:SUBUNITS>
<XPD:PROFILES>
</XPD:PROFILES>
</XPD:HEADER>
<XPD:BODY>
<XPD:OBJ name="DocumentElement" type="UMLProject" guid="3yKKVvPx10WKkpzDWfCBmAAA">
<XPD:ATTR name="Title" type="string">Untitled</XPD:ATTR>
<XPD:ATTR name="#OwnedElements" type="integer">1</XPD:ATTR>
<XPD:OBJ name="OwnedElements[0]" type="UMLModel" guid="5b0rJF+3NUy/P1sjKMmEQQAA">
<XPD:ATTR name="Name" type="string">Model1</XPD:ATTR>
<XPD:REF name="Namespace">3yKKVvPx10WKkpzDWfCBmAAA</XPD:REF>
<XPD:ATTR name="#OwnedDiagrams" type="integer">1</XPD:ATTR>
<XPD:OBJ name="OwnedDiagrams[0]" type="UMLClassDiagram" guid="2y+j4gVB6USVRuZr80oRVwAA">
<XPD:ATTR name="Name" type="string">ClassDiagram1</XPD:ATTR>
<XPD:REF name="DiagramOwner">5b0rJF+3NUy/P1sjKMmEQQAA</XPD:REF>
<XPD:OBJ name="DiagramView" type="UMLClassDiagramView" guid="A9an6SjNCkyzr4SLbwJlcwAA">
<XPD:REF name="Diagram">2y+j4gVB6USVRuZr80oRVwAA</XPD:REF>
<XPD:ATTR name="#OwnedViews" type="integer">5</XPD:ATTR>
<XPD:OBJ name="OwnedViews[0]" type="UMLNoteView" guid="0DOYa4fSOU+OaIBtkxIx/AAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">164</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">108</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">658</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">968</XPD:ATTR>
<XPD:ATTR name="Text" type="string">
void Terrain::createGeometry()
{
    mPatchWorldSize = Vector2(mSpacing.x * (float)mPatchSize, mSpacing.z * (float)mPatchSize);
    bool updateAll = false;
    //申请保存高度图信息的内存
    if (mHeightMap)
    {
                mNumPatches = Size((mHeightMap-&gt;getDataWidth() - 1) / mPatchSize, (mHeightMap-&gt;getDataHeight() - 1) / mPatchSize);
        mNumVertices = Size(mNumPatches.width * mPatchSize + 1, mNumPatches.height * mPatchSize + 1);
    }

    //保存高度图的信息到内存
    if (mHeightMap)
    {
        float* dest = mSmoothing ? mSourceHeightData : mHeightData;
                for (int z = 0; z &lt; mNumVertices.height; ++z)
                {
                        for (int x = 0; x &lt; mNumVertices.width; ++x)
                        {
                                float newHeight = getHeightAtHeightMap(x, z);
                                *dest = newHeight;
                                ++dest;
                        }
                }

        mPatches.reserve((unsigned)(mNumPatches.width * mNumPatches.height));

        for (int z = 0; z &lt; mNumPatches.height; ++z)
        {
            for (int x = 0; x &lt; mNumPatches.width; ++x)
            {
                String nodeName = &quot;Patch_&quot; + String(x) + &quot;_&quot; + String(z);
                Node* patchNode  = mNode-&gt;createTemporaryChild(nodeName);
                //设置patchNode的位置 
                patchNode-&gt;setPosition(Vector3(mPatchWorldOrigin.x + (float)x * mPatchWorldSize.x, 0.0f,
                    mPatchWorldOrigin.y + (float)z * mPatchWorldSize.y));
                //生成TerrainPatch
                TerrainPatch* patch = patchNode-&gt;getComponent&lt;TerrainPatch&gt;();
                if (!patch)
                {
                    patch = patchNode-&gt;createComponent&lt;TerrainPatch&gt;();
                    patch-&gt;setOwner(this);
                    patch-&gt;setCoordinates(Vector2(x, z));
                }
                mPatches.push(WeakPtr&lt;TerrainPatch&gt;(patch));
            }
        }
        // 创建当前Terrain的索引信息,索引信息在各个TerrainPatch中共用
        if (updateAll)
            createIndexData();
        // 创建每个TerrainPatch的顶点数据信息
        for (unsigned i = 0; i &lt; mPatches.size(); ++i)
        {
            TerrainPatch* patch = mPatches[i];
            if (dirtyPatches[i])
            {
                createPatchGeometry(patch);
                calculateLodErrors(patch);
            }
            setPatchNeighbors(patch);
        }
    }
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[1]" type="UMLNoteView" guid="Ha1L9WHuHECbRqcwFNMuTgAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1112</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">124</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">394</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">368</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void Terrain::createIndexData()
{
    PODVector&lt;unsigned short&gt; indices;
    mDrawRanges.clear();
    unsigned row = (unsigned)(mPatchSize + 1);

    for (unsigned i = 0; i &lt; mNumLodLevels; ++i)
    {
        unsigned combinations = (i &lt; mNumLodLevels - 1) ? 16 : 1;
        int skip = 1 &lt;&lt; i;

        for (unsigned j = 0; j &lt; combinations; ++j)
        {
            unsigned indexStart = indices.size();
            
            ......

            mDrawRanges.push(makePair(indexStart, indices.size() - indexStart));
        }
    }

    mIndexBuffer-&gt;setSize(indices.size(), false);
    mIndexBuffer-&gt;setData(&amp;indices[0]);
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[2]" type="UMLNoteView" guid="PzSeFmdzMk6IZNWKgpztdgAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1068</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">540</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">503</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">533</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void Terrain::createPatchGeometry(TerrainPatch* patch)
{
    unsigned row = (unsigned)(mPatchSize + 1);
    VertexBuffer* vertexBuffer = patch-&gt;getVertexBuffer();

    float* vertexData = (float*)vertexBuffer-&gt;lock(0, vertexBuffer-&gt;getVertexCount());
    float* positionData = (float*)cpuVertexData.get();
    Boundingbox box;

    unsigned occlusionLevel = mOcclusionLodLevel;
    if (vertexData)
    {
        for (int z = 0; z &lt;= mPatchSize; ++z)
        {
            for (int x = 0; x &lt;= mPatchSize; ++x)
            {
                int xPos = coords.x * mPatchSize + x;
                int zPos = coords.y * mPatchSize + z;

                Vector3 position((float)x * mSpacing.x, getRawHeight(xPos, zPos), (float)z * mSpacing.z);
                *vertexData++ = ...
                *positionData++ = ...

                box.merge(position);
            }
        }

        vertexBuffer-&gt;unlock();
        vertexBuffer-&gt;clearDataLost();
    }

    patch-&gt;setBoundingbox(box);

    patch-&gt;resetLod();
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[3]" type="UMLNoteLinkView" guid="6gZJqer1REytadclBat3UgAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1112,375;821,476</XPD:ATTR>
<XPD:REF name="Head">0DOYa4fSOU+OaIBtkxIx/AAA</XPD:REF>
<XPD:REF name="Tail">Ha1L9WHuHECbRqcwFNMuTgAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[4]" type="UMLNoteLinkView" guid="MQCNh9xhO0aBGvAquz9riAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1068,741;821,677</XPD:ATTR>
<XPD:REF name="Head">0DOYa4fSOU+OaIBtkxIx/AAA</XPD:REF>
<XPD:REF name="Tail">PzSeFmdzMk6IZNWKgpztdgAA</XPD:REF>
</XPD:OBJ>
</XPD:OBJ>
</XPD:OBJ>
</XPD:OBJ>
</XPD:OBJ>
</XPD:BODY>
</XPD:PROJECT>

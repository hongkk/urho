<?xml version="1.0" encoding="UTF-8"?>
<XPD:PROJECT xmlns:XPD="http://www.staruml.com" version="1">
<XPD:HEADER>
<XPD:SUBUNITS>
</XPD:SUBUNITS>
<XPD:PROFILES>
</XPD:PROFILES>
</XPD:HEADER>
<XPD:BODY>
<XPD:OBJ name="DocumentElement" type="UMLProject" guid="QpkYqkmznU2HhznhxeMNZAAA">
<XPD:ATTR name="Title" type="string">render</XPD:ATTR>
<XPD:ATTR name="#OwnedElements" type="integer">1</XPD:ATTR>
<XPD:OBJ name="OwnedElements[0]" type="UMLModel" guid="9PCJwSwT+ECMMR58bOgAnAAA">
<XPD:ATTR name="Name" type="string">render</XPD:ATTR>
<XPD:ATTR name="InnerName" type="string">render</XPD:ATTR>
<XPD:REF name="Namespace">QpkYqkmznU2HhznhxeMNZAAA</XPD:REF>
<XPD:ATTR name="#OwnedDiagrams" type="integer">1</XPD:ATTR>
<XPD:OBJ name="OwnedDiagrams[0]" type="UMLClassDiagram" guid="kAqXnCVqQES62m1oZvhhrwAA">
<XPD:ATTR name="Name" type="string">render</XPD:ATTR>
<XPD:REF name="DiagramOwner">9PCJwSwT+ECMMR58bOgAnAAA</XPD:REF>
<XPD:OBJ name="DiagramView" type="UMLClassDiagramView" guid="se6PUlCweE2PyekitDnh1AAA">
<XPD:REF name="Diagram">kAqXnCVqQES62m1oZvhhrwAA</XPD:REF>
<XPD:ATTR name="#OwnedViews" type="integer">5</XPD:ATTR>
<XPD:OBJ name="OwnedViews[0]" type="UMLNoteView" guid="uZ7AhhGVBkWJ2gCpv4vuQgAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">172</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">148</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">506</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">638</XPD:ATTR>
<XPD:ATTR name="Text" type="string">struct Batch
{
    /// Calculate state sorting key, which consists of base pass flag, light, pass and geometry.
    void CalculateSortKey();
    /// Prepare for rendering.
    void Prepare(View* view, Camera* camera, bool setModelTransform, bool allowDepthWrite) const;
    /// Prepare and draw.
    void Draw(View* view, Camera* camera, bool allowDepthWrite) const;

    /// State sorting key.
    unsigned long long sortKey_;
    /// Distance from camera.
    float distance_;
    /// 8-bit render order modifier from material.
    unsigned char renderOrder_;
    /// 8-bit light mask for stencil marking in deferred rendering.
    unsigned char lightMask_;
    /// Base batch flag. This tells to draw the object fully without light optimizations.
    bool isBase_;
    /// Geometry.
    Geometry* geometry_;
    /// Material.
    Material* material_;
    /// World transform(s). For a skinned model, these are the bone transforms.
    const Matrix3x4* worldTransform_;
    /// Number of world transforms.
    unsigned numWorldTransforms_;
    /// Per-instance data. If not null, must contain enough data to fill instancing buffer.
    void* instancingData_;
    /// Zone.
    Zone* zone_;
    /// Light properties.
    LightBatchQueue* lightQueue_;
    /// Material pass.
    Pass* pass_;
    /// Vertex shader.
    ShaderVariation* vertexShader_;
    /// Pixel shader.
    ShaderVariation* pixelShader_;
    /// %Geometry type.
    GeometryType geometryType_;
};
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[1]" type="UMLNoteView" guid="cYi3UbznkE6f4jHkyAIieAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">760</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">336</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">244</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">285</XPD:ATTR>
<XPD:ATTR name="Text" type="string">struct BatchGroupKey
{
    /// Zone.
    Zone* zone_;
    /// Light properties.
    LightBatchQueue* lightQueue_;
    /// Material pass.
    Pass* pass_;
    /// Material.
    Material* material_;
    /// Geometry.
    Geometry* geometry_;
    /// 8-bit render order modifier from material.
    unsigned char renderOrder_;

    /// Return hash value.
    unsigned ToHash() const;
};
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[2]" type="UMLNoteView" guid="9XKGyAdC5E+himPh9Gm91wAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1100</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">120</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">604</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">743</XPD:ATTR>
<XPD:ATTR name="Text" type="string">struct BatchQueue
{
public:
    /// Clear for new frame by clearing all groups and batches.
    void Clear(int maxSortedInstances);
    /// Sort non-instanced draw calls back to front.
    void SortBackToFront();
    /// Sort instanced and non-instanced draw calls front to back.
    void SortFrontToBack();
    /// Sort batches front to back while also maintaining state sorting.
    void SortFrontToBack2Pass(PODVector&lt;Batch*&gt;&amp; batches);
    /// Pre-set instance data of all groups. The vertex buffer must be big enough to hold all data.
    void SetInstancingData(void* lockedData, unsigned stride, unsigned&amp; freeIndex);
    /// Draw.
    void Draw(View* view, Camera* camera, bool markToStencil, bool usingLightOptimization, bool allowDepthWrite) const;
    /// Return the combined amount of instances.
    unsigned GetNumInstances() const;

    /// Return whether the batch group is empty.
    bool IsEmpty() const { return batches_.Empty() &amp;&amp; batchGroups_.Empty(); }

    /// Instanced draw calls.
    HashMap&lt;BatchGroupKey, BatchGroup&gt; batchGroups_;
    /// Shader remapping table for 2-pass state and distance sort.
    HashMap&lt;unsigned, unsigned&gt; shaderRemapping_;
    /// Material remapping table for 2-pass state and distance sort.
    HashMap&lt;unsigned short, unsigned short&gt; materialRemapping_;
    /// Geometry remapping table for 2-pass state and distance sort.
    HashMap&lt;unsigned short, unsigned short&gt; geometryRemapping_;

    /// Unsorted non-instanced draw calls.
    PODVector&lt;Batch&gt; batches_;
    /// Sorted non-instanced draw calls.
    PODVector&lt;Batch*&gt; sortedBatches_;
    /// Sorted instanced draw calls.
    PODVector&lt;BatchGroup*&gt; sortedBatchGroups_;
    /// Maximum sorted instances.
    unsigned maxSortedInstances_;
    /// Whether the pass command contains extra shader defines.
    bool hasExtraDefines_;
    /// Vertex shader extra defines.
    String vsExtraDefines_;
    /// Pixel shader extra defines.
    String psExtraDefines_;
    /// Hash for vertex shader extra defines.
    StringHash vsExtraDefinesHash_;
    /// Hash for pixel shader extra defines.
    StringHash psExtraDefinesHash_;
};
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[3]" type="UMLNoteView" guid="YHNuKqMu006lo8eUsBZlyQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1764</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">384</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">256</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">203</XPD:ATTR>
<XPD:ATTR name="Text" type="string">struct ShadowBatchQueue
{
    /// Shadow map camera.
    Camera* shadowCamera_;
    /// Shadow map viewport.
    IntRect shadowViewport_;
    /// Shadow caster draw calls.
    BatchQueue shadowBatches_;
    /// Directional light cascade near split distance.
    float nearSplit_;
    /// Directional light cascade far split distance.
    float farSplit_;
};
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[4]" type="UMLNoteView" guid="gqsO7KVKmUGdMWl7LJjs/AAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">2124</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">328</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">291</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">308</XPD:ATTR>
<XPD:ATTR name="Text" type="string">/// Queue for light related draw calls.
struct LightBatchQueue
{
    /// Per-pixel light.
    Light* light_;
    /// Light negative flag.
    bool negative_;
    /// Shadow map depth texture.
    Texture2D* shadowMap_;
    /// Lit geometry draw calls, base (replace blend mode)
    BatchQueue litBaseBatches_;
    /// Lit geometry draw calls, non-base (additive)
    BatchQueue litBatches_;
    /// Shadow map split queues.
    Vector&lt;ShadowBatchQueue&gt; shadowSplits_;
    /// Per-vertex lights.
    PODVector&lt;Light*&gt; vertexLights_;
    /// Light volume draw calls.
    PODVector&lt;Batch&gt; volumeBatches_;
};
</XPD:ATTR>
</XPD:OBJ>
</XPD:OBJ>
</XPD:OBJ>
</XPD:OBJ>
</XPD:OBJ>
</XPD:BODY>
</XPD:PROJECT>

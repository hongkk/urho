<?xml version="1.0" encoding="UTF-8"?>
<XPD:PROJECT xmlns:XPD="http://www.staruml.com" version="1">
<XPD:HEADER>
<XPD:SUBUNITS>
</XPD:SUBUNITS>
<XPD:PROFILES>
</XPD:PROFILES>
</XPD:HEADER>
<XPD:BODY>
<XPD:OBJ name="DocumentElement" type="UMLProject" guid="bWyBoNBMLU2PjKo3woDi6QAA">
<XPD:ATTR name="Title" type="string">ParticleSystem</XPD:ATTR>
<XPD:ATTR name="#OwnedElements" type="integer">1</XPD:ATTR>
<XPD:OBJ name="OwnedElements[0]" type="UMLModel" guid="k5MNki0oF0G/0oxvufsSJwAA">
<XPD:ATTR name="Name" type="string">ParticleSystem</XPD:ATTR>
<XPD:ATTR name="InnerName" type="string">ParticleSystem</XPD:ATTR>
<XPD:REF name="Namespace">bWyBoNBMLU2PjKo3woDi6QAA</XPD:REF>
<XPD:ATTR name="#OwnedDiagrams" type="integer">1</XPD:ATTR>
<XPD:OBJ name="OwnedDiagrams[0]" type="UMLClassDiagram" guid="tfIky/nQFE2EECTc080fdQAA">
<XPD:ATTR name="Name" type="string">ParticleSystem</XPD:ATTR>
<XPD:REF name="DiagramOwner">k5MNki0oF0G/0oxvufsSJwAA</XPD:REF>
<XPD:OBJ name="DiagramView" type="UMLClassDiagramView" guid="a17cR1h2y0GFuLfPEuMDNQAA">
<XPD:REF name="Diagram">tfIky/nQFE2EECTc080fdQAA</XPD:REF>
<XPD:ATTR name="#OwnedViews" type="integer">39</XPD:ATTR>
<XPD:OBJ name="OwnedViews[0]" type="UMLNoteView" guid="pX4fhPqfJE6Hsc5ZXw84fgAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">176</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1660</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">341</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">788</XPD:ATTR>
<XPD:ATTR name="Text" type="string">
///粒子系统
class LYEFFECT_API ParticleSystem :public Drawable,public Particle
{
public:
        ///开始播放逻辑
        void start();
        ///开始
        void firing (void);
        ///停止
        void stop(void);
        ///暂停
        void pause(void);
        ///继续
        void resume(void);
        ///更新
        virtual void update(float timeElapsed);
        ///添加时间
        void addTime(float timeElapsed);
        ///获取所在特效
        Effect* getEffect() const;
protected:
        Techniques              mTechniques;
        ///当前摄像机
        WeakPtr&lt;Camera&gt; mCamera;
        ///当前的状态
        unsigned                mState;
        ///固定时间停止
        float                   mStartTime;
        float                   mTimePos;//当前时间的地址
        float                   mLength;
        bool                    mUndead;
        ///粒子缩放值
        Vector3                 mParticleSystemScale;
        /// 粒子速率缩放值
        float                   mParticleSystemScaleVelocity;
        ///粒子时间缩放值
        float                   mParticleSystemScaleTime;
        ///保持本地
        bool                    mKeepLocal;
        ///所在Effect
        WeakPtr&lt;Effect&gt;         mEffect;
        bool                    mManualUpdate;
        bool                    mIsStarted;
        bool                    mIsFiring;
        //垂直地表
        bool                    mAxisLand;
        bool                    mAxisLandDirty;
};
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[1]" type="UMLNoteView" guid="WuG84QdmRkqNfsfZStiVtAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1228</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">796</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">156</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">83</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleSystem::start()
{
        mIsStarted = true;
        mAxisLandDirty = true;
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[2]" type="UMLNoteView" guid="7VCL+qaLGEmVkq2mj7I3UwAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1220</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1032</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">400</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">233</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleSystem::firing(void)
{
        mState = P_FIRING;
        mTimeElapsedSinceStart = 0;
        latestPosition = getWorldPosition();
        mLatestOrientation = getWorldRotation();
        enabled = true;

        Techniques::Iterator i, iend = mTechniques.end();
        for (i = mTechniques.begin(); i != iend; ++i)
        {
                ParticleTechnique* technique = static_cast&lt;ParticleTechnique*&gt;(*i);
                technique-&gt;_notifyStart();
        }
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[3]" type="UMLNoteView" guid="7DZfccOl7U+97rLgU5q/kQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1220</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1348</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">424</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">263</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleSystem::stop(void)
{
        if (mState != P_STOPPED)
        {
                Techniques::Iterator i, iend = mTechniques.end();
                for (i = mTechniques.begin(); i != iend; ++i)
                {
                        ParticleTechnique* technique = static_cast&lt;ParticleTechnique*&gt;(*i);
                        technique-&gt;_notifyStop();
                }

                mState = P_STOPPED;
        }
        mIsFiring = false;
        mIsStarted = false;
        mTimePos = 0.0f;
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[4]" type="UMLNoteView" guid="fLuZWZLT1023J0r1hQgnWgAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1220</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1664</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">424</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">233</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleSystem::pause(void)
{
        if (mState != P_STOPPED)
        {
                mState = P_PAUSED;

                Techniques::Iterator i, iend = mTechniques.end();
                for (i = mTechniques.begin(); i != iend; ++i)
                {
                        ParticleTechnique* technique = static_cast&lt;ParticleTechnique*&gt;(*i);
                        technique-&gt;_notifyPause();
                }
        }
        mIsStarted = false;
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[5]" type="UMLNoteView" guid="FcdPgqIqcUmDZBrqUjdSqAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1220</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1944</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">424</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">233</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleSystem::resume(void)
{
        if (mState != P_STOPPED)
        {
                mState = P_FIRING;

                Techniques::Iterator i, iend = mTechniques.end();
                for (i = mTechniques.begin(); i != iend; ++i)
                {
                        ParticleTechnique* technique = static_cast&lt;ParticleTechnique*&gt;(*i);
                        technique-&gt;_notifyResume();
                }
        }
        mIsStarted = true;
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[6]" type="UMLNoteView" guid="HdU/RM+Xz0+A2yD/9i1xzQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1224</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">2232</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">424</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">1043</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleSystem::update(float timeElapsed)
{
        mTimePos += timeElapsed * mParticleSystemScaleTime;
        if (mTimePos &gt;= mStartTime &amp;&amp; !mIsFiring)
        {
                firing();
                mIsFiring = true;
        }

        if (mState == P_FIRING)
        {   
                timeElapsed *= mParticleSystemScaleTime;
                mTimeElapsedSinceStart += timeElapsed;
                
                unsigned particlesLeft = 0;
                if (mIterationIntervalSet)
                {
                        mTimeSinceLastUpdate += timeElapsed;
                        while (mTimeSinceLastUpdate &gt;= mIterationInterval)
                        {
                                particlesLeft = _updateTechniques(mIterationInterval);
                                mTimeSinceLastUpdate -= mIterationInterval;
                        }
                }
                else
                        particlesLeft = _updateTechniques(timeElapsed);

                if (!mUndead)
                {
                        if (mTimeElapsedSinceStart &gt;= mLength)
                        {
                                if (mStopFadeSet)
                                        stopFade();
                                else
                                {
                                        stop();
                                        return;
                                }
                        }
                }

                latestPosition = getWorldPosition();
                mLatestOrientation = getWorldRotation();
        }
        else if (mState == P_PREPARED)
        {
                Techniques::Iterator i, iend = mTechniques.end();
                for (i = mTechniques.begin(); i != iend; ++i)
                {
                        ParticleTechnique* technique = static_cast&lt;ParticleTechnique*&gt;(*i);
                        if (technique-&gt;isEnabled())
                                technique-&gt;_prepare();
                }

                mState = P_STOPPED;
        }
        else if (mState == P_PAUSED)
        {
                if (mPauseTimeSet)
                {
                        mPauseTimeElapsed += timeElapsed;
                        if (mPauseTimeElapsed &gt; mPauseTime)
                        {
                                mPauseTimeElapsed = 0.0f;
                                resume();
                        }
                }
        }
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[7]" type="UMLNoteView" guid="m6YS2tb3eEyZcZGWxWS8WQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1248</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">3512</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">251</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">68</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleSystem::addTime(float timeElapsed)
{
        update(timeElapsed);
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[8]" type="UMLNoteLinkView" guid="y5KxeATlo06jTTmLpYEpFwAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1273,878;516,1838</XPD:ATTR>
<XPD:REF name="Head">pX4fhPqfJE6Hsc5ZXw84fgAA</XPD:REF>
<XPD:REF name="Tail">WuG84QdmRkqNfsfZStiVtAAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[9]" type="UMLNoteLinkView" guid="N1iJOZ3Fa0md/kXUzpCejwAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1281,1264;516,1910</XPD:ATTR>
<XPD:REF name="Head">pX4fhPqfJE6Hsc5ZXw84fgAA</XPD:REF>
<XPD:REF name="Tail">7VCL+qaLGEmVkq2mj7I3UwAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[10]" type="UMLNoteLinkView" guid="wkP4SlAgb0iCsa3f0AZHVQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1220,1591;516,1963</XPD:ATTR>
<XPD:REF name="Head">pX4fhPqfJE6Hsc5ZXw84fgAA</XPD:REF>
<XPD:REF name="Tail">7DZfccOl7U+97rLgU5q/kQAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[11]" type="UMLNoteLinkView" guid="CgS70qlU9UaZgk93ZPe4pwAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1220,1833;516,2010</XPD:ATTR>
<XPD:REF name="Head">pX4fhPqfJE6Hsc5ZXw84fgAA</XPD:REF>
<XPD:REF name="Tail">fLuZWZLT1023J0r1hQgnWgAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[12]" type="UMLNoteLinkView" guid="HjIvHe5xwk+uTC4AslbvmAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1220,2059;516,2054</XPD:ATTR>
<XPD:REF name="Head">pX4fhPqfJE6Hsc5ZXw84fgAA</XPD:REF>
<XPD:REF name="Tail">FcdPgqIqcUmDZBrqUjdSqAAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[13]" type="UMLNoteLinkView" guid="Os/VisFhgUmQpPLuXO9J/gAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1224,2617;516,2162</XPD:ATTR>
<XPD:REF name="Head">pX4fhPqfJE6Hsc5ZXw84fgAA</XPD:REF>
<XPD:REF name="Tail">HdU/RM+Xz0+A2yD/9i1xzQAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[14]" type="UMLNoteLinkView" guid="ZAWVtGWXdkKlamva81x2yQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1350,3512;516,2300</XPD:ATTR>
<XPD:REF name="Head">pX4fhPqfJE6Hsc5ZXw84fgAA</XPD:REF>
<XPD:REF name="Tail">m6YS2tb3eEyZcZGWxWS8WQAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[15]" type="UMLNoteView" guid="/XTRqYytP0CuPHckoYTdrAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1832</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">196</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">398</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">728</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleTechnique::_notifyStart (void)
{
        latestPosition = getWorldPosition();

        //通知渲染器
        if(mRenderer)
                mRenderer-&gt;_notifyStart();
        //通知观察者
        if (!mObservers.empty())
        {
                Observers::Iterator i, iend = mObservers.end();
                for (i = mObservers.begin(); i != iend; ++i)
                {
                        ParticleObserver* observer = *i;
                        observer-&gt;_notifyStart();
                }
        }
        //通知影响器
        if (!mAffectors.empty())
        {
                Affectors::Iterator i, iend = mAffectors.end();
                for (i = mAffectors.begin(); i != iend; ++i)
                {
                        ParticleAffector* affector = static_cast&lt;ParticleAffector*&gt;(*i);
                        if (!affector-&gt;markedForEmission)
                        {
                                affector-&gt;_notifyStart();
                        }
                }
        }
        //通知发射器
        if (!mEmitters.empty())
        {
                Emitters::Iterator i, iend = mEmitters.end();
                for (i = mEmitters.begin(); i != iend; ++i)
                {
                        ParticleEmitter* emitter = static_cast&lt;ParticleEmitter*&gt;(*i);
                        if (!emitter-&gt;markedForEmission)
                        {
                                emitter-&gt;_notifyStart();
                        }
                }
        }

        //_notifyStartPooledComponents();

        setEnabled(originalEnabled);
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[16]" type="UMLNoteLinkView" guid="AriYNZA5y0+xUMK6FhaEyQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1832,750;1539,1032</XPD:ATTR>
<XPD:REF name="Head">7VCL+qaLGEmVkq2mj7I3UwAA</XPD:REF>
<XPD:REF name="Tail">/XTRqYytP0CuPHckoYTdrAAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[17]" type="UMLNoteView" guid="fza9BCA/fUymmdslUJW9ugAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">2424</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">100</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">658</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">548</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleRenderer::_notifyStart(void)
{
        mDiffuseUVInfo.mUVAnimOffset = Vector2::ZERO;
        mDissolveUVInfo.mUVAnimOffset = Vector2::ZERO;
        if (mTextureDirty)
        {
                updateTexture();
        }
        Vector&lt;DissolveInfo&gt;::Iterator i, iend = mDissolveInfos.end();
        for (i = mDissolveInfos.begin(); i != iend; ++i)
        {
                DissolveInfo&amp; info = *i;
                if (info.textureDirty &amp;&amp; info.enabled)
                {
                        ResourceCache* cache = mContext-&gt;getSubsystem&lt;ResourceCache&gt;();
                        if (!info.textureName.empty())
                                info.texture = cache-&gt;getResource&lt;Texture2D&gt;(info.textureName, true, Texture::CLOSE_MINMAP_PARAMS);
                        if (info.texture)
                        {
                                info.texture-&gt;setBorderColor(Color(0.0f, 0.0f, 0.0f, 0.0f));
                                info.texture-&gt;setAddressMode(COORD_U, (TextureAddressMode)mDissolveUVInfo.mUAddressMode);
                                info.texture-&gt;setAddressMode(COORD_V, (TextureAddressMode)mDissolveUVInfo.mVAddressMode);
                        }
                        info.textureDirty = false;
                }
        }
        mStoped = false;
        mFirstTotalTimeToLiveSet = false;

        //初始化序列帧动画值
        if (mTextureAnimation.enabled)
        {
                mTextureAnimation.textureCoordsStart = 0;
                mTextureAnimation.textureCoordsEnd = getNumImagesets() - 1;
        }
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[18]" type="UMLNoteLinkView" guid="DNjfyQmUwkKTXhZSXoZbzQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">2424,457;2229,507</XPD:ATTR>
<XPD:REF name="Head">/XTRqYytP0CuPHckoYTdrAAA</XPD:REF>
<XPD:REF name="Tail">fza9BCA/fUymmdslUJW9ugAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[19]" type="UMLNoteView" guid="42gPLh1ULkCQUot2bmCXdwAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">3328</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">607</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">593</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleStaticModelRenderer::_notifyStart(void)
{
        ParticleRenderer::_notifyStart();
        ResourceCache* cache = getSubsystem&lt;ResourceCache&gt;();
        Model* model = cache-&gt;getResource&lt;Model&gt;(mModelName);
        if (model)
        {
                Vector3 size = model-&gt;getBoundingbox().getSize();
                mBoxWidth = size.x == 0.0f ? 1.0f : size.x;
                mBoxHeight = size.y == 0.0f ? 1.0f : size.y;
                mBoxDepth = size.z == 0.0f ? 1.0f : size.z;
        }
        Vector&lt;StaticModelRendererVisualData*&gt;::Iterator i, iend = mActiveVisualDatas.end();
        for (i = mActiveVisualDatas.begin(); i != iend; ++i)
        {
                StaticModelRendererVisualData* data = *i;
                if (mUseRendererResource)
                {
                        //设置纹理
                        data-&gt;setMaterialTexture(TU_DIFFUSE, getTexture());
                }
                else
                {
                        data-&gt;setMaterialTexture(TU_DIFFUSE, mOldTextures);
                        for (unsigned index = 0; index &lt; mOldTextures.size(); ++index)
                        {
                                Texture* texture = mOldTextures[index];
                                if (texture)
                                {
                                        texture-&gt;setAddressMode(COORD_U, (TextureAddressMode)mDiffuseUVInfo.mUAddressMode);
                                        texture-&gt;setAddressMode(COORD_V, (TextureAddressMode)mDiffuseUVInfo.mVAddressMode);
                                }
                        }
                }
                bindAllDissolveTexture(data);
                setDissolveUAddressMode(mDissolveUVInfo.mUAddressMode);
                setDissolveVAddressMode(mDissolveUVInfo.mVAddressMode);
        }
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[20]" type="UMLNoteLinkView" guid="W7c8gzFcl0qQ0qZ1zEunBAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">3328,323;3081,344</XPD:ATTR>
<XPD:REF name="Head">fza9BCA/fUymmdslUJW9ugAA</XPD:REF>
<XPD:REF name="Tail">42gPLh1ULkCQUot2bmCXdwAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[21]" type="UMLNoteView" guid="780cxEWklEqof07QYWHYigAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">2428</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">672</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">220</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">83</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleObserver::_notifyStart (void)
{
        mObserve = true;
        setEnabled(originalEnabled);
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[22]" type="UMLNoteView" guid="K7v0xycH7kOhdwH8h7pNBgAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">2432</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">788</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">215</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">68</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleAffector::_notifyStart (void)
{
        setEnabled(originalEnabled);
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[23]" type="UMLNoteView" guid="jnuLleIlCESXqjLg55hWMwAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">2432</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">900</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">324</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">173</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleEmitter::_notifyStart (void)
{
        latestPosition = getWorldPosition();
        mEmitterMode = mOriginalEmitterMode;
        mEmitterModeExecuted = mOriginalEmitterModeExecuted;
        mRemainder = 0;
        mDurationRemain = 0;
        mRepeatDelayRemain = 0;
        mEmitCount = 0;
        setEnabled(originalEnabled);
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[24]" type="UMLNoteLinkView" guid="AakyhUWPe0GDJL5dpXGauQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">2428,680;2229,619</XPD:ATTR>
<XPD:REF name="Head">/XTRqYytP0CuPHckoYTdrAAA</XPD:REF>
<XPD:REF name="Tail">780cxEWklEqof07QYWHYigAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[25]" type="UMLNoteLinkView" guid="PSKloqZwnUOOxzJZfSaJvAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">2475,788;2229,661</XPD:ATTR>
<XPD:REF name="Head">/XTRqYytP0CuPHckoYTdrAAA</XPD:REF>
<XPD:REF name="Tail">K7v0xycH7kOhdwH8h7pNBgAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[26]" type="UMLNoteLinkView" guid="MdSk+7jhdU2i4+IIlXZCUQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">2480,900;2229,710</XPD:ATTR>
<XPD:REF name="Head">/XTRqYytP0CuPHckoYTdrAAA</XPD:REF>
<XPD:REF name="Tail">jnuLleIlCESXqjLg55hWMwAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[27]" type="UMLNoteView" guid="AiStDbWs1E2M8z5YoUv5wQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1840</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1100</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">398</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">698</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleTechnique::_notifyStop (void)
{
        //通知渲染器
        if(mRenderer)
                mRenderer-&gt;_notifyStop();
        //通知观察者
        if (!mObservers.empty())
        {
                Observers::Iterator i, iend = mObservers.end();
                for (i = mObservers.begin(); i != iend; ++i)
                {
                        ParticleObserver* observer = *i;
                        observer-&gt;_notifyStop();
                }
        }
        //通知影响器
        if (!mAffectors.empty())
        {
                Affectors::Iterator i, iend = mAffectors.end();
                for (i = mAffectors.begin(); i != iend; ++i)
                {
                        ParticleAffector* affector = static_cast&lt;ParticleAffector*&gt;(*i);
                        if (!affector-&gt;markedForEmission)
                        {
                                affector-&gt;_notifyStop();
                        }
                }
        }
        //通知发射器
        if (!mEmitters.empty())
        {
                Emitters::Iterator i, iend = mEmitters.end();
                for (i = mEmitters.begin(); i != iend; ++i)
                {
                        ParticleEmitter* emitter = static_cast&lt;ParticleEmitter*&gt;(*i);
                        if (!emitter-&gt;markedForEmission)
                        {
                                emitter-&gt;_notifyStop();
                        }
                }
        }

        //_notifyStopPooledComponents();

        _initAllParticlesForExpiration();
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[28]" type="UMLNoteLinkView" guid="NA537dk4S0mt8EW+pVfpGgAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1840,1458;1643,1468</XPD:ATTR>
<XPD:REF name="Head">7DZfccOl7U+97rLgU5q/kQAA</XPD:REF>
<XPD:REF name="Tail">AiStDbWs1E2M8z5YoUv5wQAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[29]" type="UMLNoteView" guid="WXX8KpU9MEWfl4Bzyu0HLgAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">2464</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1128</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">215</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">83</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleRenderer::_notifyStop(void)
{
        mStoped = true;
        mFirstTotalTimeToLiveSet = false;
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[30]" type="UMLNoteLinkView" guid="1fru8Q3fVUq6QvL3k/oA+QAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">2493,1210;2237,1344</XPD:ATTR>
<XPD:REF name="Head">AiStDbWs1E2M8z5YoUv5wQAA</XPD:REF>
<XPD:REF name="Tail">WXX8KpU9MEWfl4Bzyu0HLgAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[31]" type="UMLNoteView" guid="+EvMA8xnrUWKFEMOfGvnjAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">2832</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1132</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">270</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">83</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleStaticModelRenderer::_notifyStop(void)
{
        ParticleRenderer::_notifyStop();
        _destroyAllVisualDatas();
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[32]" type="UMLNoteLinkView" guid="8ysne9mIBE6Z+WBhRbHHnAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">2832,1172;2678,1170</XPD:ATTR>
<XPD:REF name="Head">WXX8KpU9MEWfl4Bzyu0HLgAA</XPD:REF>
<XPD:REF name="Tail">+EvMA8xnrUWKFEMOfGvnjAAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[33]" type="UMLNoteView" guid="YG2ZYB9wSEe1X0ZdcRND3QAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">2476</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1324</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">359</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">278</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleTechnique::_initAllParticlesForExpiration(void)
{
        if (!mPool.isEmpty())
        {
                Particle* particle = static_cast&lt;Particle*&gt;(mPool.getFirst());
                while (!mPool.isEnd())
                {
                        if (particle)
                        {
                                _initParticleForExpiration(particle, 0);
                        }

                        particle = static_cast&lt;Particle*&gt;(mPool.getNext());
                }
        }

        mPool.lockAllParticles();
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[34]" type="UMLNoteLinkView" guid="HpwLA7Q9pkmuaznqIrbAvAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">2476,1458;2237,1453</XPD:ATTR>
<XPD:REF name="Head">AiStDbWs1E2M8z5YoUv5wQAA</XPD:REF>
<XPD:REF name="Tail">YG2ZYB9wSEe1X0ZdcRND3QAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[35]" type="UMLNoteView" guid="rtv6Xfxp3EOhrXwFWpb/vQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">2956</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1340</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">430</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">248</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void ParticleTechnique::_initParticleForExpiration(Particle* particle, float timeElapsed)
{
        particle-&gt;_initForExpiration(this, timeElapsed);

        if (!mListenerList.empty())
        {
                TechniqueListenerList::Iterator it;
                TechniqueListenerList::Iterator itEnd = mListenerList.end();
                for (it = mListenerList.begin(); it != itEnd; ++it)
                {
                        (*it)-&gt;particleExpired(this, particle);
                }
        }
        if (mRenderer)
                mRenderer-&gt;_initParticleForExpiration(particle, timeElapsed);
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[36]" type="UMLNoteLinkView" guid="qXwvJUv2qESS7aycCpuMHgAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">2956,1463;2834,1463</XPD:ATTR>
<XPD:REF name="Head">YG2ZYB9wSEe1X0ZdcRND3QAA</XPD:REF>
<XPD:REF name="Tail">rtv6Xfxp3EOhrXwFWpb/vQAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[37]" type="UMLNoteView" guid="XQDjDQXDXU+1XV+J/mqvFwAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">3456</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1388</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">624</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">143</XPD:ATTR>
<XPD:ATTR name="Text" type="string">///粒子过期后
void ParticleStaticModelRenderer::particleExpired(ParticleTechnique* particleTechnique, Particle* particle)
{
        if (particle-&gt;visualData)
        {
                StaticModelRendererVisualData* visualData = static_cast&lt;StaticModelRendererVisualData*&gt;(particle-&gt;visualData);
                freeVisualData(visualData);
        }
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[38]" type="UMLNoteLinkView" guid="jd6MEz+nbUuhPL1a7IjoBAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">3456,1461;3385,1461</XPD:ATTR>
<XPD:REF name="Head">rtv6Xfxp3EOhrXwFWpb/vQAA</XPD:REF>
<XPD:REF name="Tail">XQDjDQXDXU+1XV+J/mqvFwAA</XPD:REF>
</XPD:OBJ>
</XPD:OBJ>
</XPD:OBJ>
</XPD:OBJ>
</XPD:OBJ>
</XPD:BODY>
</XPD:PROJECT>

<?xml version="1.0" encoding="UTF-8"?>
<XPD:PROJECT xmlns:XPD="http://www.staruml.com" version="1">
<XPD:HEADER>
<XPD:SUBUNITS>
</XPD:SUBUNITS>
<XPD:PROFILES>
</XPD:PROFILES>
</XPD:HEADER>
<XPD:BODY>
<XPD:OBJ name="DocumentElement" type="UMLProject" guid="idecTQ8qmEKK95BYJJEpeQAA">
<XPD:ATTR name="Title" type="string">Geometry</XPD:ATTR>
<XPD:ATTR name="#OwnedElements" type="integer">1</XPD:ATTR>
<XPD:OBJ name="OwnedElements[0]" type="UMLModel" guid="yQAyCKicSkaXnnPiy5qwHgAA">
<XPD:ATTR name="Name" type="string">Geometry</XPD:ATTR>
<XPD:ATTR name="InnerName" type="string">Geometry</XPD:ATTR>
<XPD:REF name="Namespace">idecTQ8qmEKK95BYJJEpeQAA</XPD:REF>
<XPD:ATTR name="#OwnedDiagrams" type="integer">1</XPD:ATTR>
<XPD:OBJ name="OwnedDiagrams[0]" type="UMLClassDiagram" guid="hD3DquO1KE2iiKu3BSF3kgAA">
<XPD:ATTR name="Name" type="string">Geometry</XPD:ATTR>
<XPD:REF name="DiagramOwner">yQAyCKicSkaXnnPiy5qwHgAA</XPD:REF>
<XPD:OBJ name="DiagramView" type="UMLClassDiagramView" guid="HYJGh0eCH02TAuHo6jyGCAAA">
<XPD:REF name="Diagram">hD3DquO1KE2iiKu3BSF3kgAA</XPD:REF>
<XPD:ATTR name="#OwnedViews" type="integer">22</XPD:ATTR>
<XPD:OBJ name="OwnedViews[0]" type="UMLNoteView" guid="avIU43XoekqUeVb3ATTDVwAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">2448</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">2040</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">404</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">533</XPD:ATTR>
<XPD:ATTR name="Text" type="string">///几何数据
class LYCORE_API Geometry 
{
public:
    Geometry(Context* context);
    virtual ~Geometry();
        ///设置顶点缓冲区数量
    bool setNumVertexBuffers(unsigned num);
        ///设置顶点缓冲区
    bool setVertexBuffer(unsigned index, VertexBuffer* buffer);
        ///设置索引缓冲区
    void setIndexBuffer(IndexBuffer* buffer);

        ///绘制
    void draw(Graphics* graphics);

        ///获取原始数据
    void getRawData(const unsigned char*&amp; vertexData, unsigned&amp; vertexSize, 
    const unsigned char*&amp; indexData, unsigned&amp; indexSize, const 

private:
    Vector&lt;SharedPtr&lt;VertexBuffer&gt; &gt; mVertexBuffers;
    SharedPtr&lt;IndexBuffer&gt; mIndexBuffer;
    PrimitiveType mPrimitiveType;
    unsigned mIndexStart;
    unsigned mIndexCount;
    unsigned mVertexStart;
    unsigned mVertexCount;
    float mLodDistance;
    PODVector&lt;VertexElement&gt; mRawElements;
    SharedArrayPtr&lt;unsigned char&gt; mRawVertexData;
    SharedArrayPtr&lt;unsigned char&gt; mRawIndexData;
    unsigned mRawVertexSize;
    unsigned mRawIndexSize;
};
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[1]" type="UMLNoteView" guid="RlQVg/P85k2/l2lZIl/56AAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1264</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">684</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">345</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">203</XPD:ATTR>
<XPD:ATTR name="Text" type="string">///GPU相关对象的基类
class LYCORE_API GPUObject
{
public:
    void* getGPUObject() const { return mObject.mPtr; }
    unsigned getGPUObjectName() const { return mObject.mName; }

protected:
    WeakPtr&lt;Graphics&gt; mGraphics;
    GPUObjectHandle mObject;
    bool mDataLost;
    bool mDataPending;
};
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[2]" type="UMLNoteView" guid="BrR2e5A2ek6AKp7zfUt/jQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1200</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">984</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">473</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">383</XPD:ATTR>
<XPD:ATTR name="Text" type="string">///顶点缓冲区
class LYCORE_API VertexBuffer : public Object, public GPUObject
{
public:
    ///设置数据范围
    bool setDataRange(const void* data, unsigned start, unsigned count, bool discard = false);
    ///将数据拷贝到内存缓冲区
    void* lock(unsigned start, unsigned count, bool discard = false);
    ///将数据从内存拷贝到显存
    void unlock();
private:
    SharedArrayPtr&lt;unsigned char&gt; mShadowData;
    unsigned mVertexCount;
    unsigned mVertexSize;
    PODVector&lt;VertexElement&gt; mElements;
    unsigned long long mElementHash;
    unsigned mElementMask;
    LockState mLockState;
    unsigned mLockStart;
    unsigned mLockCount;
    void* mLockScratchData;
    bool mDynamic;
    bool mShadowed;
    bool mDiscardLock;
};
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[3]" type="UMLNoteLinkView" guid="NoGvYDrKrk+3gW2hXA1bEAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1436,984;1436,886</XPD:ATTR>
<XPD:REF name="Head">RlQVg/P85k2/l2lZIl/56AAA</XPD:REF>
<XPD:REF name="Tail">BrR2e5A2ek6AKp7zfUt/jQAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[4]" type="UMLNoteView" guid="D2jR3sqIREWg37uFIsXIPQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">536</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">440</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">410</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">188</XPD:ATTR>
<XPD:ATTR name="Text" type="string">bool VertexBuffer::create()
{
    if (mGraphics)
    {
        if (!mObject.mName)
            C_CHECK_GL_ERROR(glGenBuffers(1, &amp;mObject.mName));

        mGraphics-&gt;setVBO(mObject.mName);
        glBufferData(GL_ARRAY_BUFFER, mVertexCount * mVertexSize, 
                                    0, mDynamic ? GL_DYNAMIC_DRAW : GL_STATIC_DRAW);
    }
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[5]" type="UMLNoteView" guid="vW1iqSI+e0CVDQHm+3GBpQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">284</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">956</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">500</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">338</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void* VertexBuffer::lock(unsigned start, unsigned count, bool discard)
{
    mLockStart = start;
    mLockCount = count;
    mDiscardLock = discard;

    if (mShadowData)
    {
        mLockState = LOCK_SHADOW;
        return mShadowData.get() + start * mVertexSize;
    }
    else if (mGraphics)
    {
        mLockState = LOCK_SCRATCH;
        mLockScratchData = mGraphics-&gt;reserveScratchBuffer(count * mVertexSize);
        return mLockScratchData;
    }
    else
        return 0;
}

// lock的时候不是直接返回显卡内存的指针，而是返回指向一般内存的mLockScratchData 指针
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[6]" type="UMLNoteLinkView" guid="7jKbwzz9/Eeu4CTHJSay/wAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">842,627;1229,984</XPD:ATTR>
<XPD:REF name="Head">BrR2e5A2ek6AKp7zfUt/jQAA</XPD:REF>
<XPD:REF name="Tail">D2jR3sqIREWg37uFIsXIPQAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[7]" type="UMLNoteLinkView" guid="0ju36GxmUEyng1yLwGveaQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">783,1138;1200,1162</XPD:ATTR>
<XPD:REF name="Head">BrR2e5A2ek6AKp7zfUt/jQAA</XPD:REF>
<XPD:REF name="Tail">vW1iqSI+e0CVDQHm+3GBpQAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[8]" type="UMLNoteView" guid="e4bwH+mnSkaU4ehFOVNH1gAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">368</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1328</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">409</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">323</XPD:ATTR>
<XPD:ATTR name="Text" type="string">void VertexBuffer::unlock()
{
    switch (mLockState)
    {
    case LOCK_SHADOW:
        setDataRange(mShadowData.get() + mLockStart * mVertexSize, 
                                                             mLockStart, mLockCount, mDiscardLock);
        mLockState = LOCK_NONE;
        break;

    case LOCK_SCRATCH:
        setDataRange(mLockScratchData, mLockStart, mLockCount, mDiscardLock);
        if (mGraphics)
            mGraphics-&gt;freeScratchBuffer(mLockScratchData);
        mLockScratchData = 0;
        mLockState = LOCK_NONE;
        break;
    }
}

// unlock的时候把mLockScratchData 指针指向的内存数据再拷贝到 显示中
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[9]" type="UMLNoteLinkView" guid="ZqfcoHnc5U6DEJh5D33SkAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">776,1415;1200,1261</XPD:ATTR>
<XPD:REF name="Head">BrR2e5A2ek6AKp7zfUt/jQAA</XPD:REF>
<XPD:REF name="Tail">e4bwH+mnSkaU4ehFOVNH1gAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[10]" type="UMLNoteView" guid="tJ21uEQjy0WvLtbNOyVm3QAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">224</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">660</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">627</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">263</XPD:ATTR>
<XPD:ATTR name="Text" type="string">bool VertexBuffer::setDataRange(const void* data, unsigned start, unsigned count, bool discard)
{
    if (start == 0 &amp;&amp; count == mVertexCount)
        return setData(data);

    if (mShadowData &amp;&amp; mShadowData.get() + start * mVertexSize != data)
        memcpy(mShadowData.get() + start * mVertexSize, data, count * mVertexSize);

    if (mObject.mName)
    {
        mGraphics-&gt;setVBO(mObject.mName);
        if (!discard || start != 0)
            glBufferSubData(GL_ARRAY_BUFFER, start * mVertexSize, count * mVertexSize, data))
        else
            glBufferData(GL_ARRAY_BUFFER, count * mVertexSize, data, mDynamic ? GL_DYNAMIC_DRAW : GL_STATIC_DRAW);
    }
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[11]" type="UMLNoteLinkView" guid="aQL15NukAESCLWZmdY+ZLQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">844,922;1200,1074</XPD:ATTR>
<XPD:REF name="Head">BrR2e5A2ek6AKp7zfUt/jQAA</XPD:REF>
<XPD:REF name="Tail">tJ21uEQjy0WvLtbNOyVm3QAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[12]" type="UMLNoteLinkView" guid="TFs5OewfckmH38gxqERHhgAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1641,1366;2448,2119</XPD:ATTR>
<XPD:REF name="Head">avIU43XoekqUeVb3ATTDVwAA</XPD:REF>
<XPD:REF name="Tail">BrR2e5A2ek6AKp7zfUt/jQAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[13]" type="UMLNoteView" guid="TJ2FrS10sUOG6GkbOrrgewAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">572</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1684</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">203</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">218</XPD:ATTR>
<XPD:ATTR name="Text" type="string">///顶点元素
struct LYCORE_API VertexElement
{
    ///元素类型
    VertexElementType mType;
    ///元素定义
    VertexElementSemantic mSemantic;
    ///索引
    unsigned char mIndex;
    ///是否预先实例化
    bool mPerInstance;
    ///偏移量
    unsigned mOffset;
};
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[14]" type="UMLNoteView" guid="IM8kVuNJZk+q+LbbHPZrDwAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">312</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1684</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">209</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">218</XPD:ATTR>
<XPD:ATTR name="Text" type="string">///顶点元素定义
enum VertexElementSemantic
{
    SEM_POSITION = 0,
    SEM_NORMAL,
    SEM_BINORMAL,
    SEM_TANGENT,
    SEM_TEXCOORD,
    SEM_COLOR,
    SEM_BLENDWEIGHTS,
    SEM_BLENDINDICES,
    SEM_OBJECTINDEX,
    MAX_VERTEX_ELEMENT_SEMANTICS
};
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[15]" type="UMLNoteLinkView" guid="9qX8baYZ9EGpCeEejFxSVQAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">572,1792;520,1792</XPD:ATTR>
<XPD:REF name="Head">IM8kVuNJZk+q+LbbHPZrDwAA</XPD:REF>
<XPD:REF name="Tail">TJ2FrS10sUOG6GkbOrrgewAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[16]" type="UMLNoteLinkView" guid="VokQtbAZS02AWzWVxUXR/QAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1200,1366;774,1710</XPD:ATTR>
<XPD:REF name="Head">TJ2FrS10sUOG6GkbOrrgewAA</XPD:REF>
<XPD:REF name="Tail">BrR2e5A2ek6AKp7zfUt/jQAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[17]" type="UMLNoteView" guid="XFfcSwtO2UGJ0tAeJ5y/lgAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1260</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">2100</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">473</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">308</XPD:ATTR>
<XPD:ATTR name="Text" type="string">///索引缓冲区
class LYCORE_API IndexBuffer :  public Object, public GPUObject
{
    bool setData(const void* data);
    bool setDataRange(const void* data, unsigned start, unsigned count, bool discard = false);
    void* lock(unsigned start, unsigned count, bool discard = false);
    void unlock();
    bool create();

    SharedArrayPtr&lt;unsigned char&gt; mShadowData;
    unsigned mIndexCount;
    unsigned mIndexSize;
    LockState mLockState;
    unsigned mLockStart;
    unsigned mLockCount;
    void* mLockScratchData;
    bool mDynamic;
    bool mShadowed;
    bool mDiscardLock;
};
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[18]" type="UMLNoteView" guid="kZuIIKXLi0WaJGRHvDiUtwAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">1316</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">1792</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">345</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">203</XPD:ATTR>
<XPD:ATTR name="Text" type="string">///GPU相关对象的基类
class LYCORE_API GPUObject
{
public:
    void* getGPUObject() const { return mObject.mPtr; }
    unsigned getGPUObjectName() const { return mObject.mName; }

protected:
    WeakPtr&lt;Graphics&gt; mGraphics;
    GPUObjectHandle mObject;
    bool mDataLost;
    bool mDataPending;
};
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[19]" type="UMLNoteLinkView" guid="U/Hzc2yoIUmKRKT/OOdtngAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Points" type="Points">1493,2100;1490,1994</XPD:ATTR>
<XPD:REF name="Head">kZuIIKXLi0WaJGRHvDiUtwAA</XPD:REF>
<XPD:REF name="Tail">XFfcSwtO2UGJ0tAeJ5y/lgAA</XPD:REF>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[20]" type="UMLNoteView" guid="XPRnwAJX+E+FenVlBTAxdwAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">420</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">2052</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">389</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">143</XPD:ATTR>
<XPD:ATTR name="Text" type="string">bool IndexBuffer::create()
{
    if (!mObject.mName)
       glGenBuffers(1, &amp;mObject.mName)

    mGraphics-&gt;setIndexBuffer(this);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, mIndexCount * mIndexSize, 
                      0, mDynamic ? GL_DYNAMIC_DRAW : GL_STATIC_DRAW);
}
</XPD:ATTR>
</XPD:OBJ>
<XPD:OBJ name="OwnedViews[21]" type="UMLNoteView" guid="8srFHvQFTkqf+ECuuSywoAAA">
<XPD:ATTR name="LineColor" type="string">clMaroon</XPD:ATTR>
<XPD:ATTR name="FillColor" type="string">$00B9FFFF</XPD:ATTR>
<XPD:ATTR name="Left" type="integer">304</XPD:ATTR>
<XPD:ATTR name="Top" type="integer">2244</XPD:ATTR>
<XPD:ATTR name="Width" type="integer">681</XPD:ATTR>
<XPD:ATTR name="Height" type="integer">218</XPD:ATTR>
<XPD:ATTR name="Text" type="string">bool IndexBuffer::setDataRange(const void* data, unsigned start, unsigned count, bool discard)
{
    if (mShadowData &amp;&amp; mShadowData.get() + start * mIndexSize != data)
        memcpy(mShadowData.get() + start * mIndexSize, data, count * mIndexSize);

    if (mObject.mName)
    {
            mGraphics-&gt;setIndexBuffer(this);
            if (!discard || start != 0)
                glBufferSubData(GL_ELEMENT_ARRAY_BUFFER, start * mIndexSize, count * mIndexSize, data)
            else
                glBufferData(GL_ELEMENT_ARRAY_BUFFER, count * mIndexSize, data, mDynamic ? GL_DYNAMIC_DRAW : GL_STATIC_DRAW)
    }
}
</XPD:ATTR>
</XPD:OBJ>
</XPD:OBJ>
</XPD:OBJ>
</XPD:OBJ>
</XPD:OBJ>
</XPD:BODY>
</XPD:PROJECT>
